name: Python Status Checks

on:
  workflow_call:
    inputs:
      pyproject-toml-directory:
        description: The path to a directory containing a `pyproject.toml` file
        required: false
        type: string
        default: .
      python-root:
        description: The root directory of the Python project relative to `pyproject-toml-directory`
        required: true
        type: string
      run-tests:
        description: Whether to run tests
        required: false
        type: boolean
        default: false
      run-type-checking-mypy:
        description: Whether to run mypy
        required: false
        type: boolean
        default: false
      run-type-checking-ty:
        description: Whether to run ty
        required: false
        type: boolean
        default: false
      run-style-checks:
        description: Whether to run style checks
        required: false
        type: boolean
        default: true
      test-command:
        description: The command(s) used to run tests
        required: false
        type: string
        default: pytest --quiet --pythonwarnings=ignore

env:
  UV_INDEX_FURY_USERNAME: ${{ secrets.FURY_TOKEN }}
  UV_INDEX_FURY_PASSWORD: "NOPASS"
  TARGET: ${{ inputs.pyproject-toml-directory }}/${{ inputs.python-root }}

jobs:
  dependencies-uv:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: |
          uv python install
          uv sync --no-cache --locked --all-groups --no-progress
        working-directory: ${{ inputs.pyproject-toml-directory }}

  style-ruff:
    if: ${{ inputs.run-style-checks }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv python install
          uv tool install ruff@latest
        working-directory: ${{ inputs.pyproject-toml-directory }}

      - name: Ruff code style checking
        run: uv run ruff format --check ${{ inputs.python-root }}
        working-directory: ${{ inputs.pyproject-toml-directory }}

  typing-mypy:
    if: ${{ inputs.run-type-checking-mypy }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv python install
          uv sync --all-groups --quiet
        working-directory: ${{ inputs.pyproject-toml-directory }}

      - name: Linting
        run: uv run mypy ${{ inputs.python-root }}
        working-directory: ${{ inputs.pyproject-toml-directory }}

  typing-ty:
    if: ${{ inputs.run-type-checking-ty }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv python install
          uv tool install ty@latest
          uv sync --all-groups --all-packages --quiet
        working-directory: ${{ inputs.pyproject-toml-directory }}

      - name: Linting
        run: uv run ty check ${{ inputs.python-root }}
        working-directory: ${{ inputs.pyproject-toml-directory }}

  testing-pytest:
    # Do not run for Dependabot PRs as it's fragile and may block automatic merging.
    if: ${{ github.actor != 'dependabot[bot]' && inputs.run-tests }}
    environment: testing
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file from `testing` Environment
        run: |
          echo '${{ toJson(secrets) }}' \
            | jq -r 'if . == null then {} else . end | to_entries[] | "\(.key)=\(.value)"' > .devcontainer/.env
          echo '${{ toJson(vars) }}' \
            | jq -r 'if . == null then {} else . end | to_entries[] | "\(.key)=\(.value)"' >> .devcontainer/.env
          echo 'GITHUB_ACTIONS=true' >> .devcontainer/.env

      - name: Create .env files referenced in specific repos - Integro
        run: touch .devcontainer/.env.sync

      - name: Pytest
        uses: devcontainers/ci@v0.3.1900000417
        with:
          runCmd: ${{ inputs.test-command }}
