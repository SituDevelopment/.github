name: Python Status Checks

on:
  workflow_call:
    inputs:
      pyproject-toml-directory:
        description: The path to a directory containing a `pyproject.toml` file
        required: false
        type: string
        default: .
      python-root:
        description: The root directory of the Python project relative to `pyproject-toml-directory`
        required: true
        type: string
      python-version:
        description: The Python version to use
        required: false
        type: string
        default: "3.10" # trailing zero
      run-tests:
        description: Whether to run tests
        required: false
        type: boolean
        default: false
      test-command:
        description: The command(s) used to run tests
        required: false
        type: string
        default: pytest --quiet --pythonwarnings=ignore

env:
  POETRY_HTTP_BASIC_FURY_USERNAME: ${{ secrets.FURY_TOKEN }}
  POETRY_HTTP_BASIC_FURY_PASSWORD: "NOPASS"
  TARGET: ${{ inputs.pyproject-toml-directory }}/${{ inputs.python-root }}

jobs:
  code-style-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          src: ${{ env.TARGET }}

  code-style-isort:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pip install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: poetry
      - run: poetry config virtualenvs.create false
      - run: poetry install
        working-directory: ${{ inputs.pyproject-toml-directory }}
      - uses: isort/isort-action@v1
        with:
          configuration: --check-only --diff
          sort-paths: ${{ env.TARGET }}

  code-style-ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pip install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: poetry
      - run: poetry install
        working-directory: ${{ inputs.pyproject-toml-directory }}
      - run: |
          source $(poetry env info --path)/bin/activate
          ruff format --check ${{ inputs.python-root }}
        working-directory: ${{ inputs.pyproject-toml-directory }}

  code-style:
    needs:
      - code-style-black
      - code-style-isort
      - code-style-ruff
    runs-on: ubuntu-latest
    if: ${{ always() && needs.code-style-ruff.result == 'success' || (needs.code-style-black.result == 'success' && needs.code-style-isort.result == 'success') }}
    steps:
      - run: echo "Code style checks passed."

  dependencies-poetry:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pip install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: poetry
      - run: poetry config virtualenvs.create false
      - run: poetry install
        working-directory: ${{ inputs.pyproject-toml-directory }}

  linting-mypy:
    # Do not run for Dependabot PRs as it's fragile and may block automatic merging.
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pip install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: poetry
      - run: poetry install
        working-directory: ${{ inputs.pyproject-toml-directory }}
      - run: source $(poetry env info --path)/bin/activate && mypy ${{ inputs.python-root }}
        working-directory: ${{ inputs.pyproject-toml-directory }}

  linting-pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pip install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: poetry
      - run: poetry install
        working-directory: ${{ inputs.pyproject-toml-directory }}
      - run: source $(poetry env info --path)/bin/activate && pylint --exit-zero ${{ inputs.python-root }}
        working-directory: ${{ inputs.pyproject-toml-directory }}

  linting-ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pip install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: poetry
      - run: poetry install
        working-directory: ${{ inputs.pyproject-toml-directory }}
      - run: |
          source $(poetry env info --path)/bin/activate
          ruff check ${{ inputs.python-root }}
        working-directory: ${{ inputs.pyproject-toml-directory }}

  linting:
    needs:
      - linting-pylint
      - linting-ruff
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.linting-ruff.result == 'success' || needs.linting-pylint.result == 'success') }}
    steps:
      - run: echo "Linting checks passed."

  testing-pytest:
    # Do not run for Dependabot PRs as it's fragile and may block automatic merging.
    if: ${{ github.actor != 'dependabot[bot]' && inputs.run-tests }}
    environment: testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create .env file from `testing` Environment
        run: |
          echo '${{ toJson(secrets) }}' \
            | jq -r 'to_entries[] | "\(.key)=\(.value)"' > .devcontainer/.env
          echo 'GITHUB_ACTIONS=true' >> .devcontainer/.env
      - name: Pytest
        uses: devcontainers/ci@v0.3.1900000349
        with:
          runCmd: ${{ inputs.test-command }}
